Convert search trees to use templates.

Make documentation more consistent and complete.

Re-think Mflograph (again). In the second phase, we can associate
a reverse edge with edges that have no min-flow requirement.
This allows flow added in first phase to be removed from these edges.
Need a way to relate the paired edges. Suppose we construct a graph
with 2M edges to start with, where e maps to 2e and 2e+1. For edges
with min flow requirements, first phase can use these to connect to
source and sink. For edges with no min flow requirement, second phase
can use these as reverse edges. Use same graph in both phases
(with adjustments) and copy results to original graph when done.
Represent min flows with array indexed by edge numbers.

Add memSpace methods to data structures to facilitate
space calculations. Not sure can do this for templates.
Maybe can. Would require objects used in templates to
support this, but we already requre toString, so maybe
it's ok.

Might want to auto-adjust space in HashSet if both
buckets are full on an insert. Note that this could
make hash table pretty sparse. Not likely to happen,
but possible.

Rework matching stuff
- integrate fast initialization, drop separate "fast" versions
  maybe not; re-evaluate fast versions; may be that only the
  initial maximal matching is really worth the trouble
- make class hierarchy for edmonds variants
- add private visited(x) method that compares phase to lastVisit(x)
  to make efficient versions more transparent

Use templates for keys in heaps and search trees.
Started on this, including HashSet and HashMap.

Add unit tests for all data structures.
- consider alternate designs for this
- fully scripted version is nice, but more automated version
  might be better, rather than always comparing to strings;
  also requires lots of test methods, making it cumbersome

Augment the Java stuff. Maybe do some animations?
Revisit the efficiency comparison using inline Java methods.
Ron Cytron says that if a method is private or final, it
can be inlined. I guess final is the only useful one here.
